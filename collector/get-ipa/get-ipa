#!/bin/bash

function failed() {  
    echo
    echo "––––––––––––––––––––––––––––––––––––––––––—–––"
    echo "––––––––––––––––––––––––––––––––––––––––––—–––"
    echo "Failed to process app $BundleID"
    echo "Error description: $1"
    echo "––––––––––––––––––––––––––––––––––––––––––—–––"
    echo "––––––––––––––––––––––––––––––––––––––––––—–––"
    echo 
    cd ..
    sshpass -p "alpine" ssh -p $DevicePort root@$DeviceIP "{
        cd /var/mobile/Documents
        rm -r tmp &> /dev/null
    }"
    rm -r ipas &> /dev/null
    rm -r decrypted &> /dev/null
}

# Help docs
for arg in "$@"
do
    if [ "$arg" == "--help" ] || [ "$arg" == "-h" ] ; then
        echo "Usage: . get-ipa <DeviceIP> <DevicePort> <BundleID> [-h | --help]"
        echo
        echo "get-ipa is a tool to retrieve an .ipa file from the App Store, decrypt it, fakesign it and produce an output .ipa."
        echo
        echo "Options:"
        echo "  -h, --help          Show this help message and exit"
        echo "  <DeviceIP>          The IP of the iOS device used to decrypt"
        echo "  <DevicePort>        The Port of the iOS device used to decrypt"
        echo "  <BundleID>          The Bundle ID of the app to process"
        echo
        echo "Examples:"
        echo "  . get-ipa 127.0.0.1 2222 com.facebook.Facebook"
        echo
        return 0
    fi
done

echo "Starting..."
echo

DeviceIP=$1
DevicePort=$2
BundleID=$3
OutputName=$4

echo
echo "––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––"
echo "[0] Log In to download from the App Store..."
echo

if [ -f auth.txt ]; then
email=$(sed -n '1p' auth.txt)
pwd=$(sed -n '2p' auth.txt)
else
read -p "Enter your e-mail: " email
read -sp "Enter your password: " pwd
echo
echo
echo "WARNING: You can avoid this by creating an auth.txt file in the current directory. 1st line must be your email. 2nd line your password."
echo
fi

ipatool auth login --email $email --password $pwd || { echo "Error: Login failed" ; return 1; }

# mkdir -p signed
mkdir -p decrypted

rm -r ipas &> /dev/null
mkdir -p ipas
cd ipas

echo 
echo "––––– $BundleID –––––"
echo 

echo "––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––"
echo "[1] Downloading from the App Store..."
echo
ipatool download --purchase --bundle-identifier "$BundleID" || { echo "Error: Download failed" ; return 1; }

# Find the IPA file
IpaFile=$(find . -type f -name '*.ipa' -print -quit)
IpaFileName=$(basename "$IpaFile")

echo
echo "[+] Getting the executable name..."
# Get the executable name
Executable=$(unzip -q -c "$IpaFile" Payload/*.app/Info.plist | grep -A1 Exec | tail -n1 | sed -e 's/.*<string>//;s/<\/string>.*//')

# Extract the IPA file
echo "[+] Extracting IPA file..."
unzip -q "$IpaFile" -d extracted

# Modify the CFBundleMinimumVersion in Info.plist
echo "[+] Modifying Info.plist..."
PlistFile=$(find extracted/Payload/*.app/Info.plist)
plutil -replace MinimumOSVersion -string "14.3" "$PlistFile"

# Repackage the IPA
echo "[+] Repackaging IPA..."
cd extracted
zip -qr "../$IpaFileName" Payload

# Clean up
cd ..
rm -rf extracted

echo "[+] IPA file modified and repackaged as $IpaFileName"

# SSH into the device and prepare the directory
rm -r /Volumes/$DeviceIP/var/mobile/Documents/tmp 
# sshpass -p "alpine" ssh -p $DevicePort root@$DeviceIP "{
#     cd /var/mobile/Documents
#     if [ -d \"tmp\" ]; then
#         rm -r tmp
#     fi
#     mkdir -p tmp
# }"

echo
echo "––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––"
echo "[2] Sending $BundleID to device..."
echo

# sshpass -p "alpine" scp -P $DevicePort "$IpaFile" root@$DeviceIP:/var/mobile/Documents/tmp
mkdir -p /Volumes/$DeviceIP/var/mobile/Documents/tmp
cp $IpaFile /Volumes/$DeviceIP/var/mobile/Documents/tmp
if [ $? -ne 0 ]; then
    failed "Connection closed by device. Try Again."
    return
fi

echo
echo "––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––"
echo "[3] Installing $BundleID..."
echo
# sshpass -p "alpine" ssh -p $DevicePort root@$DeviceIP "{
sshpass -p "alpine" ssh root@$DeviceIP "{
    cd /var/mobile/Documents/tmp
    appinst $IpaFile
    sleep 3
}"
if [ $? -ne 0 ]; then
    failed "Connection closed by device. Try Again."
    return
fi

echo
echo "––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––"
echo "[4] Decrypting $BundleID..."
echo

# sshpass -p "alpine" ssh -p $DevicePort root@$DeviceIP "{
sshpass -p "alpine" ssh root@$DeviceIP "{
    source /etc/profile
    foulwrapper $BundleID
    for file in /var/root/*; do
        if [[ \"\$file\" =~ .*_dumped.ipa ]]
        then
            mv \"\$file\" \"$IpaFile\"
        fi
    done
}"
if [ $? -ne 0 ]; then
    failed "Connection closed by device. Try Again."
    return
fi

cd ../decrypted
cp /Volumes/$DeviceIP/var/root/$IpaFile "./$OutputName.ipa"
# sshpass -p "alpine" scp -P $DevicePort root@$DeviceIP:/var/root/$IpaFile ./$IpaFile
# if [ $? -ne 0 ]; then
#     failed "Connection closed by device. Try Again."
#     return
# fi

# sshpass -p "alpine" ssh -p $DevicePort root@$DeviceIP "{
sshpass -p "alpine" ssh root@$DeviceIP "{
    source /etc/profile
    cd /var/root
    rm -r \"$IpaFile\"
    AppUninstall $BundleID
}"

DecryptedFile=$(find . -type f -name '*.ipa' -print -quit)

# echo
# echo "––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––"
# echo "[5] Fakesigning the .ipa's..."
# echo

# sh ../fakesign.sh $DecryptedFile
# rm -r $DecryptedFile
# mv "$DecryptedFile-fakesigned.ipa" $DecryptedFile
# mv $DecryptedFile ../signed/$DecryptedFile

cd ..
rm -r /Volumes/$DeviceIP/var/mobile/Documents/tmp 
# sshpass -p "alpine" ssh -p $DevicePort root@$DeviceIP "{
#     cd /var/mobile/Documents
#     rm -r tmp &> /dev/null
# }"
rm -r ipas &> /dev/null
# rm -r decrypted &> /dev/null
